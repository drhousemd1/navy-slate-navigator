
import { useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Task } from '@/lib/taskUtils'; // Assuming Task type is exported
import { useCreateOptimisticMutation } from '@/lib/optimistic-mutations';

// Define the type for variables used to create a task, omitting fields generated by DB or client
export type CreateTaskVariables = Partial<Omit<Task, 'id' | 'created_at' | 'updated_at' | 'completed'>> & {
  title: string;
  points: number;
  // Add other non-optional fields from Task if not already covered by Partial
};

export const useCreateTask = () => {
  const queryClient = useQueryClient();

  return useCreateOptimisticMutation<Task, Error, CreateTaskVariables>({
    queryClient,
    queryKey: ['tasks'],
    mutationFn: async (variables: CreateTaskVariables) => {
      const { data, error } = await supabase
        .from('tasks')
        .insert({
          ...variables,
          // Ensure all required fields for Supabase table are present
          // Default values can be set here if not in variables or DB schema
          completed: false, // Default for new tasks
        })
        .select()
        .single();

      if (error) throw error;
      if (!data) throw new Error('Task creation failed, no data returned.');
      return data as Task;
    },
    entityName: 'Task',
    createOptimisticItem: (variables, optimisticId) => {
      const now = new Date().toISOString();
      return {
        id: optimisticId,
        completed: false,
        created_at: now,
        updated_at: now,
        // Spread other variables, ensuring required fields are present
        // and providing defaults for Task interface
        title: variables.title,
        description: variables.description || '',
        points: variables.points,
        frequency: variables.frequency || 'daily',
        priority: variables.priority || 'medium',
        icon_name: variables.icon_name || undefined,
        icon_color: variables.icon_color || '#9b87f5', // Default from schema
        background_image_url: variables.background_image_url || undefined,
        subtext_color: '#8E9196', // Default from schema
        title_color: '#FFFFFF', // Default from schema
        calendar_color: '#7E69AB', // Default from schema
        background_opacity: variables.background_opacity || 100, // Default from schema
        highlight_effect: variables.highlight_effect || false, // Default from schema
        focal_point_x: variables.focal_point_x || 50, // Default from schema
        focal_point_y: variables.focal_point_y || 50, // Default from schema
        frequency_count: variables.frequency_count || 1, // Default from schema
        // Ensure all fields of Task type are covered
        last_completed_date: null,
        week_identifier: null,
        usage_data: [],
        background_images: null,
        carousel_timer: 5,
        ...variables, // Spread again to override defaults if provided
      } as Task; // Cast to Task, ensure all fields are covered
    },
  });
};
